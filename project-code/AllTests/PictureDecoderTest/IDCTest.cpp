//
// Created by bhave on 3/1/2020.
//

#include "gtest/gtest.h"
#include "../../PictureDecoder/DecodingStages/FCTTransformer.h"

class IdctTest : public ::testing::Test {
protected:
    Block::initializerStruct init = {0, 0, 0, 0, nullptr};
    Block* b = new Block(init);
    double pre[64] = {1432, -6, -7, 8, 0, 0, 0, 0, -78, -30, 0, -9, 0, 0, 0, 0, 35, -41, -9, -10, 0, 0, 0, 0, 41, 0, -19,
                   0, 0, 0, 0, 0, 16, 19, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                   0, 0, 0, 0, 1};
    int pre2[64] = {1432, -6, -7, 8, 0, 0, 0, 0, -78, -30, 0, -9, 0, 0, 0, 0, 35, -41, -9, -10, 0, 0, 0, 0, 41, 0, -19,
                      0, 0, 0, 0, 0, 16, 19, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 1};
};

TEST_F(IdctTest, Full_IDCTtest) {
    int post[64] = {158, 167, 177, 184, 186, 186, 187, 189, 145, 151, 160, 167, 172, 176, 179, 181, 161, 158, 155,
                      154, 157, 161, 165, 167, 189, 180, 170, 164, 163, 163, 161, 159, 193, 189, 186, 185, 186, 181,
                      172, 164, 187, 187, 189, 194, 197, 195, 186, 178, 194, 192, 190, 191, 194, 194, 192, 189, 193,
                      193, 193, 194, 196, 196, 195, 194};
    b->setData(pre2);
    FCTTransformer::performIDCTBlockHelper(b);
    auto result = b->getData();
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            EXPECT_EQ(post[i * 8 + j], result[i * 8 + j]);
        }
    }

    std::cout << std::endl << std::endl << std::endl;
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            std::cout << result[i*8+j] << ", " << post[i*8+j] << ", " << result[i*8+j]/post[i*8+j] << std::endl;
        }
    }

//    std::cout << std::endl << std::endl << std::endl;
//    for (int i = 0; i < 8; i++) {
//        for (int j = 0; j < 8; j++) {
//           std::cout << "(" << result[i*8+j] << ", " << post[i*8+j] << "), ";
//        }
//        std::cout <<  std::endl;
//    }
//
//    std::cout << std::endl << std::endl << std::endl << "Actual values" << std::endl;
//    for (int i = 0; i < 8; i++) {
//        for (int j = 0; j < 8; j++) {
//            std::cout << result[i*8+j] << ", ";
//        }
//        std::cout <<  std::endl;
//    }
//
//    std::cout << std::endl << std::endl << std::endl << "Expected Values" << std::endl;
//    for (int i = 0; i < 8; i++) {
//        for (int j = 0; j < 8; j++) {
//            std::cout << post[i*8+j] << ", ";
//        }
//        std::cout <<  std::endl;
//    }
}

TEST_F(IdctTest, RowIDCTtest) {
    double post[64] = {1420.59977698, 1413.54335145, 1414.99816077, 1433.70410586, 1456.16452105, 1459.71697534,
                       1439.74151245, 1417.53159611, -151.81356985, -124.37655094,  -93.68007893,  -79.70515513,
                       -76.29484487,  -62.31992107,  -31.62344906,   -4.18643015, -78.68361682, -36.16700355,
                       15.94724828,  46.74382984, 56.51583333,  67.82935528,  92.39039999, 115.42395365, 5.89257776,
                       26.45802957, 55.54197043, 76.10742224, 76.10742224, 55.54197043, 26.45802957,  5.89257776,
                       53.26984066,  47.59584527,  37.11166885,  23.41343224, 8.58656776,  -5.11166885, -15.59584527,
                       -21.26984066, 38.09329626,  24.28306089,   3.45773601, -14.57578421, -22.37939709, -18.76507331,
                       -8.9757236 ,  -1.13811496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.39018064, -1.11114047,
                       1.66293922, -1.96157056,  1.96157056, -1.66293922,  1.11114047, -0.39018064};

    auto arr = (double*) malloc(sizeof(double)*8*8);
    for (size_t i = 0; i < 8; i++) {
        FCTTransformer::chenIdct(1, arr + 8*i, pre + 8*i);
    }
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            EXPECT_NEAR(arr[i * 8 + j],  post[i * 8 + j] * 0.5, 0.00000001);
        }
    }

    std::cout << std::endl << std::endl << std::endl;
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
           std::cout << arr[i*8+j] << ", " << post[i*8+j]*0.5 << ", " << arr[i*8+j]/(post[i*8+j]*0.5) << std::endl;
        }
    }
}

TEST_F(IdctTest, ColumnIDCTtest) {
    double pre[64] = {710.29988848842197, 706.77167572350004, 707.49908038521221, 716.85205293132537,
                      728.08226052383259, 729.85848766789911, 719.87075622338864, 708.76579805642007,
                      -75.90678492281981, -62.188275470931202, -46.840039466958991, -39.852577563307428,
                      -38.147422436692572, -31.159960533041016, -15.811724529068798, -2.093215077180183,
                      -39.34180841215948, -18.08350177552888, 7.9736241415144171, 23.371914920136341,
                      28.257916665066816, 33.914677641057189, 46.195199992957264, 57.711976826956324,
                      2.9462888822855504, 13.229014785063292, 27.770985214936704, 38.05371111771445,
                      38.05371111771445, 27.770985214936715, 13.22901478506329, 2.9462888822855575,
                      26.634920327661376, 23.79792263374836, 18.555834427372446, 11.706716118306439,
                      4.2932838816935641, -2.5558344273724369, -7.797922633748362, -10.634920327661376,
                      19.046648129145172, 12.141530446676351, 1.7288680065451256, -7.2878921049515846,
                      -11.189698545274149, -9.3825366538469233, -4.4878617993745529, -0.56905747891944003,
                      0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0,
                      0.19509032201612833, -0.55557023301960218, 0.83146961230254546, -0.98078528040323065,
                      0.98078528040323043, -0.83146961230254501, 0.55557023301960151, -0.19509032201612858};
    double post[64] = {552.51577755, 477.56543441, 620.37694236, 819.06117299, 822.26190137, 785.10973661, 807.47757833,
                       798.0305643, 620.29959658, 527.4996375 , 595.72079913, 756.15743741, 791.52451259, 778.19288854,
                       791.05199794, 793.72653609, 705.02118607, 594.31689946, 570.69106391, 671.11813069,
                       766.89718292, 779.61777603, 780.40293131, 791.9274727, 753.22032797, 652.44961434,
                       559.00673517, 622.19401718, 758.25034678, 805.80959879, 783.9190766 , 799.96670662,
                       762.76920711, 686.21323975, 580.61576548, 604.24098682, 759.63913146, 820.15016882,
                       801.06338688, 809.96619788, 763.21940487, 716.10571959, 613.37440515, 606.59075807,
                       720.56491975, 801.65722062, 802.75458816, 814.60088514, 780.41378996, 742.98525814,
                       651.1965186 , 594.06367458, 652.90678288, 739.88829897, 789.52466097, 807.98706569,
                       800.44866485, 764.67922618, 670.98334378, 582.43382377, 591.74201853, 688.28667993, 771.27413658,
                       800.27849082};

    auto arr = (double*) malloc(sizeof(double)*8*8);
    for (size_t i = 0; i < 8; i++) {
        FCTTransformer::chenIdct(8, arr + i, pre + i);
    }
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            EXPECT_NEAR(arr[i * 8 + j],  post[j * 8 + i] * 0.5, 0.00000001);
        }
    }
    std::cout << std::endl << std::endl << std::endl;
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            std::cout << arr[i*8+j] << ", " << post[i*8+j]*0.5 << ", " << arr[i*8+j]/(post[i*8+j]*0.5) << std::endl;
        }
    }
}
