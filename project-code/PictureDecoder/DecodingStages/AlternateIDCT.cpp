//
// Created by elnsa on 2020-02-10.
//

#include <cmath>
#include "AlternateIDCT.h"

long double AlternateIDCT::squirt = 0.707106781186547524400844362104849039284835937688;
long double AlternateIDCT::cosab[64] = {1,
                                        1,
                                        1,
                                        1,
                                        1,
                                        1,
                                        1,
                                        1,

                                        0.999698818696204220115765649666172196850061081257,
                                        0.997290456678690216135597140182567821171688679166,
                                        0.992479534598709998156767251661117820010820654634,
                                        0.985277642388941244774018433178547787160129155812,
                                        0.975702130038528544460395766419527971644012265792,
                                        0.963776065795439866686464355507835153663083848826,
                                        0.949528180593036667195936074189345028252224153832,
                                        0.932992798834738887711660255543302498295015520512,

                                        0.998795456205172392714771604759100694443203614704,
                                        0.989176509964780973451673738016243063983689533336,
                                        0.970031253194543992603984207286100251456865962248,
                                        0.941544065183020778412509402599502357185589795825,
                                        0.903989293123443331586200297230537048710132025050,
                                        0.857728610000272069902269984284770137042490799433,
                                        0.803207531480644909806676512963141923879569427170,
                                        0.740951125354959091175616897495162729728955309309,

                                        0.997290456678690216135597140182567821171688679166,
                                        0.975702130038528544460395766419527971644012265792,
                                        0.932992798834738887711660255543302498295015520512,
                                        0.870086991108711418652292404483848843910827789529,
                                        0.788346427626606262009164705359689282656493137149,
                                        0.689540544737066924616730629957484702845536844279,
                                        0.575808191417845300745972453815730841776008455314,
                                        0.449611329654606600046294579424227075883187048377,

                                        0.995184726672196886244836953109479921575474868729,
                                        0.956940335732208864935797886980269969482849205630,
                                        0.881921264348355029712756863660388349508442620674,
                                        0.773010453362736960810906609758469800971041292900,
                                        0.634393284163645498215171613225493370675687094841,
                                        0.471396736825997648556387625905254377657460318932,
                                        0.290284677254462367636192375817395274691476278324,
                                        0.098017140329560601994195563888641845861136673167,

                                        0.992479534598709998156767251661117820010820654634,
                                        0.932992798834738887711660255543302498295015520512,
                                        0.817584813151583696504920884130633809471042517566,
                                        0.653172842953776764084203013656305415076860023714,
                                        0.449611329654606600046294579424227075883187048377,
                                        0.219101240156869797227737547497357798848360796705,
                                        -0.024541228522912288031734529459282925065466119239,
                                        -0.266712757474898386325286515116436394042116988356,

                                        0.989176509964780973451673738016243063983689533336,
                                        0.903989293123443331586200297230537048710132025050,
                                        0.740951125354959091175616897495162729728955309309,
                                        0.514102744193221726593693838968815772608049120416,
                                        0.242980179903263889948274162077471118320990783283,
                                        -0.049067674327418014254954976942682658314745363025,
                                        -0.336889853392220050689253212619147570477766779671,
                                        -0.595699304492433343467036528829969889511926338437,

                                        0.985277642388941244774018433178547787160129155812,
                                        0.870086991108711418652292404483848843910827789529,
                                        0.653172842953776764084203013656305415076860023714,
                                        0.359895036534988148775104572326756420202317421129,
                                        0.024541228522912288031734529459282925065466119239,
                                        -0.313681740398891476656478845994100309993377509456,
                                        -0.615231590580626845484913563413984277659430007764,
                                        -0.844853565249707073259571205104957097719785981389
};

void AlternateIDCT::performIDCTNaive(HPicture *picture) {
    for (size_t s = 0; s < picture->getNumSlices(); s++) {
        Slice *slice = picture->getSlices()[s];
        for (size_t m = 0; m < slice->getNumMacroblocks(); m++) {
            Macroblock *macroblock = &slice->getMacroblocks()[m];
            for (size_t b = 0; b < macroblock->getBlockCount(); b++) {
                Block *block = macroblock->getBlocks()[b];
                if (block) performIDCTonBlock(block);
            }
        }
    }
    picture->setState(HPicture::decoding_state::discrete_cosine_transformed);
}

void AlternateIDCT::performIDCTonBlock(Block *block) {
    block->setFdctransformed((int *) malloc(sizeof(int) * 8 * 8));
    long double realArray[64];
    performRealIDCT((long double *) &realArray, block->getFquantized());
    performRound(block->getFdctransformed(), (long double *) &realArray);
    performSaturation(block->getFdctransformed());
}

void AlternateIDCT::performRealIDCT(long double *realArray, int *sourceArray) {
    for (size_t i = 0; i < 64; i++) {
        realArray[i] = realIDCTHelper(i, sourceArray);
    }
}

void AlternateIDCT::performRound(int *destArray, long double *sourceArray) {
    for (size_t i = 0; i < 64; i++) {
        destArray[i] = (int) (sourceArray[i] + 0.5 - (sourceArray[i] < 0));
    }
}

void AlternateIDCT::performSaturation(int *array) {
    for (size_t i = 0; i < 64; i++) {
        if (array[i] < -256) array[i] = -256;
        if (array[i] > 255) array[i] = 255;
    }
}

long double AlternateIDCT::realIDCTHelper(size_t i, int *sourceArray) {
    long double div = (double) 4;
    long double out = 0;
    for (size_t u = 0; u < 8; u++) {
        for (size_t v = 0; v < 8; v++) {
            long double cu = 1;
            long double cv = 1;
            if (u == 0) cu = squirt;
            if (v == 0) cv = squirt;
            long double arr = (long double) sourceArray[u * 8 + v];
            out += (cu * cv * arr * cosab[u * 8 + (i % 8)] * cosab[v * 8 + (i / 8)]);
        }
    }
    return out / div;
}
